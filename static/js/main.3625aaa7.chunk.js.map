{"version":3,"sources":["App.tsx","index.tsx"],"names":["Sort","goodsFromServer","App","useState","sortField","setSortField","reverse","setReverse","switcherReset","visibleGoods","goods","prepareGoods","sort","good1","good2","name","localeCompare","length","getPrepareGoods","className","type","cn","onClick","content","default","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gBAAAA,E,gBAAAA,E,YAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAgBJ,GAAaE,EAE7BG,EA/BR,SACEC,EADF,GAGG,IADCN,EACF,EADEA,UAAWE,EACb,EADaA,QAETK,EAAY,YAAOD,GAmBvB,OAjBIN,IACFO,EAAeA,EAAaC,MAAK,SAACC,EAAOC,GACvC,OAAQV,GACN,KAAKJ,EAAKe,KACR,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAAKiB,OACR,OAAOJ,EAAMT,GAAaU,EAAMV,GAClC,QACE,OAAO,OAKXE,IACFK,EAAeA,EAAaL,WAGvBK,EAQcO,CAAgBjB,EAAiB,CAAEG,YAAWE,YAOnE,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYjB,IAAcJ,EAAKe,OAEjCO,QAAS,kBAAMjB,EAAaL,EAAKe,OALnC,iCAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYjB,IAAcJ,EAAKiB,SAEjCK,QAAS,kBAAMjB,EAAaL,EAAKiB,SALnC,4BAUA,wBACEG,KAAK,SACLE,QAAS,kBAAMf,GAAW,SAACgB,GAAD,OAAcA,MACxCJ,UAAWE,IAAG,oBAAqB,CACjC,YAAaf,IAJjB,qBAUCE,GACC,wBACEY,KAAK,SACLD,UAAU,4BACVG,QA1CO,WACff,GAAW,GACXF,EAAaL,EAAKwB,UAqCZ,sBAUJ,6BACGf,EAAagB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC1GlCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3625aaa7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport \"bulma/css/bulma.css\";\n\nimport \"./App.scss\";\n\nexport const goodsFromServer = [\n  \"Dumplings\",\n  \"Carrot\",\n  \"Eggs\",\n  \"Ice cream\",\n  \"Apple\",\n  \"Bread\",\n  \"Fish\",\n  \"Honey\",\n  \"Jam\",\n  \"Garlic\",\n];\n\nenum Sort {\n  name = \"alphabet\",\n  length = \"length\",\n  default = \"\",\n}\n\nfunction getPrepareGoods(\n  goods: string[],\n  { sortField, reverse }: { sortField: string; reverse: boolean },\n) {\n  let prepareGoods = [...goods];\n\n  if (sortField) {\n    prepareGoods = prepareGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case Sort.name:\n          return good1.localeCompare(good2);\n        case Sort.length:\n          return good1[sortField] - good2[sortField];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(\"\");\n  const [reverse, setReverse] = useState(false);\n  const switcherReset = sortField || reverse;\n\n  const visibleGoods = getPrepareGoods(goodsFromServer, { sortField, reverse });\n\n  const resetAll = () => {\n    setReverse(false);\n    setSortField(Sort.default);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\"button is-info\", {\n            \"is-light\": sortField !== Sort.name,\n          })}\n          onClick={() => setSortField(Sort.name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\"button is-success\", {\n            \"is-light\": sortField !== Sort.length,\n          })}\n          onClick={() => setSortField(Sort.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setReverse((content) => !content)}\n          className={cn(\"button is-warning\", {\n            \"is-light\": !reverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {switcherReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetAll}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\n"],"sourceRoot":""}